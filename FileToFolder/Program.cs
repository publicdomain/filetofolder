// <copyright file="Program.cs" company="PublicDomain.com">
//     CC0 1.0 Universal (CC0 1.0) - Public Domain Dedication
//     https://creativecommons.org/publicdomain/zero/1.0/legalcode
// </copyright>
// <auto-generated />

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace FileToFolder
{
    /// <summary>
    /// Class with program entry point.
    /// </summary>
    internal sealed class Program
    {
        /// <summary>
        /// The file mutex.
        /// </summary>
        private static Mutex fileMutex = null;

        /// <summary>
        /// Program entry point.
        /// </summary>
        [STAThread]
        private static void Main(string[] args)
        {
            /* TODO Plenty of code inherited from FileToFolder; it can be simplified for single-directory processing */

            // Check arguments for context menu start
            if (args.Length > 0)
            {
                // Get file write mutex to write item
                fileMutex = new Mutex(false, @"Local\FileToFolderWrite");
                fileMutex.WaitOne();

                // Set file path
                string filePath = args[0];

                // Set file name without extension
                string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(filePath);

                // Declare error list
                List<string> errorList = new List<string>();

                // Create folder
                for (int i = 0; i < int.MaxValue; i++)
                {
                    // Set directory name
                    string directoryName = $"{fileNameWithoutExtension}{(i > 0 ? $"({i})" : string.Empty)}";

                    // Set destionation directory
                    string destionationDirectory = Path.Combine(Path.GetDirectoryName(filePath), directoryName);

                    // Check for a previous one
                    if (Directory.Exists(destionationDirectory))
                    {
                        // Skip iteration
                        continue;
                    }

                    // Set destionation file path
                    string destinationFilePath = Path.Combine(destionationDirectory, Path.GetFileName(filePath));

                    // Try to perform program action
                    try
                    {
                        // Create the recipient directory
                        Directory.CreateDirectory(destionationDirectory);

                        // Move target file there
                        File.Move(filePath, destinationFilePath);
                    }
                    catch (Exception exception)
                    {
                        // Add exception to error list
                        errorList.Add(
                        $"From: {filePath}{Environment.NewLine}To: {destinationFilePath}{Environment.NewLine}Message: {exception.Message}{Environment.NewLine}{Environment.NewLine}"
                            );
                    }

                    // Exit for loops
                    break;
                }

                // Release the mutex
                fileMutex.ReleaseMutex();

                // Handle error list
                if (errorList.Count > 0)
                {
                    // Save to file
                    File.AppendAllLines("FileToFolderErrorLog.txt", errorList);

                    // Advise user
                    MessageBox.Show($"Error count: {errorList.Count} error{(errorList.Count > 1 ? "s" : string.Empty)}.{Environment.NewLine}{Environment.NewLine}Please check FileToFolderErrorLog.txt for detailed information.", "FileToFolder operation had errors", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else // Execution by user
            {
                Application.EnableVisualStyles();
                Application.SetCompatibleTextRenderingDefault(false);
                Application.Run(new MainForm());
            }
        }

    }
}
